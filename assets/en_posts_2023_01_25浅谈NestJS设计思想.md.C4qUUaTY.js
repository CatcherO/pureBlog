import{_ as i,c as a,o as e,ar as t}from"./chunks/framework.Dw9xXWbv.js";const g=JSON.parse('{"title":"浅谈 NestJS 设计思想（分层、IOC、AOP","description":"","frontmatter":{"title":"浅谈 NestJS 设计思想（分层、IOC、AOP","date":"2023-01-25T00:00:00.000Z","tags":["NestJS","设计模式","分层","IOC","AOP"]},"headers":[],"relativePath":"en/posts/2023/01/25浅谈NestJS设计思想.md","filePath":"en/posts/2023/01/25浅谈NestJS设计思想.md","lastUpdated":1742015773000}'),n={name:"en/posts/2023/01/25浅谈NestJS设计思想.md"};function l(r,s,p,h,o,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="浅谈-nestjs-设计思想-分层、ioc、aop" tabindex="-1">浅谈 NestJS 设计思想（分层、IOC、AOP <a class="header-anchor" href="#浅谈-nestjs-设计思想-分层、ioc、aop" aria-label="Permalink to &quot;浅谈 NestJS 设计思想（分层、IOC、AOP&quot;">​</a></h1><blockquote><p>✨文章摘要（AI生成）</p></blockquote><p>笔者在这篇文章中深入探讨了 NestJS 框架的设计思想，重点分析了分层架构、控制反转（IoC）和面向切面编程（AOP）。</p><p>首先，分层架构使得不同层次的逻辑清晰可分，便于维护和扩展，强调了 Service 层的必要性，以提高代码的复用性和模块化。其次，IoC 通过依赖注入的方式减少了类之间的紧耦合，使得系统更具灵活性，便于未来的修改和扩展。最后，AOP 通过在请求处理链中引入切面，简化了通用逻辑的管理，如日志记录和权限验证等。</p><p>这些设计思想相辅相成，提升了 NestJS 的可维护性和可扩展性，值得开发者在实际项目中深入理解和应用。</p><hr><blockquote><p>nestJS 用了有一定时间了，当初学习 node 后端选择的第一个 web 框架，这篇文章将对 NestJS 框架层面的几个重要概念进行梳理，希望能加深记忆，融汇贯通，更进一步，本文阅读需要对 nestJS 有一定使用经验。</p></blockquote><h2 id="分层" tabindex="-1">分层 <a class="header-anchor" href="#分层" aria-label="Permalink to &quot;分层&quot;">​</a></h2><p>nestJS 经常被调侃为 srpingJS，所以这里参考 java 项目的<a href="https://www.kancloud.cn/kanglin/java_developers_guide/539198" target="_blank" rel="noreferrer">阿里分层规范</a>，其架构图如下：</p><blockquote><p>图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于 Web 层，也可以直接依赖于 Service 层，依此类推：</p></blockquote><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020230125151727.png" alt=""></p><ul><li><strong>开放接口层</strong>：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。</li><li><strong>终端显示层</strong>：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li><li><strong>Web 层</strong>：主要是对访问控制进行转发，各类基本参数校验，或者<strong>不复用</strong>的业务简单处理等。</li><li><strong>Service 层</strong>：相对具体的业务逻辑服务层。</li><li><strong>Manager 层</strong>：通用业务处理层，它有如下特征： <ol><li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li><li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；</li><li>与 DAO 层交互，对多个 DAO 的组合复用。</li></ol></li><li><strong>DAO 层</strong>：数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</li><li><strong>外部接口或第三方平台</strong>：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li></ul><p>不同的业务场景，不同的应用大小，程序复杂度高低，可以灵活的增删上述某些结构。无论是 nest 还是 egg，官方 demo 里都没有明确提到 dao 层，直接在 service 层操作数据库了。这对于简单的业务逻辑没问题，如果业务逻辑变得复杂，service 层的维护将会变得非常困难。业务一开始一般都很简单，它一定会向着复杂的方向演化，如果从长远考虑，一开始就应该保留 dao 层，在 nestJS 中并未查看到相关规定，可根据开发者场景自行考虑。如下是 nestJS 的分层架构图：</p><p><img src="https://oss.justin3go.com/blogs/nestjs%E5%88%86%E5%B1%82.png" alt=""></p><p>对于 Web 层：在 nestJS 中，如果使用 restful 风格，就是 controller；如果使用 graphql 规范，就是 resolver...对于同一个业务逻辑，我们可以使用不同的接口方式暴露出去。</p><p>经常被问到和提起的问题就是<strong>为什么需要有 service 层</strong>：</p><ul><li>首先 service 作用就是在里面编写业务逻辑代码，一般来说，都是为了增加代码复用率，实现高内聚，低耦合等...</li><li>体现在这里的好处就是上述提到的同一段业务代码可以使用不同的接口方式暴露出去，或者可以在一个 service 内调用其他 service，而非在一个接口函数里面调用另外一个内部接口，这是极其不优雅的。</li><li>当然，老生常谈的就是不同功能目的的代码分开写方便维护管理等等</li></ul><blockquote><p>有关 nestJS 实战入门可以参考我之前写的<a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/01controller.html" target="_blank" rel="noreferrer">这一系列文章</a>或者<a href="https://docs.nestjs.com/first-steps" target="_blank" rel="noreferrer">官方链接</a></p></blockquote><h2 id="ioc-inversion-of-control" tabindex="-1">IOC(Inversion of Control) <a class="header-anchor" href="#ioc-inversion-of-control" aria-label="Permalink to &quot;IOC(Inversion of Control)&quot;">​</a></h2><p>中文为控制反转，是<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noreferrer">面向对象程序设计</a>的一种设计原则，下面简单认识一下为什么需要 IOC，IOC 有什么好处，简单来说就是减少了固定性，通过外部传参进行控制内部本身固定的一些变量，如下例子：</p><p>在我们的代码中，经常会出现一个类依赖于另外一个类的情况，比如这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _pet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._pet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xiaoming</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在上述例子中：</p><ul><li><code>Person</code>类固定依赖于<code>Dog</code>类，如果后续<code>Person</code>想要依赖于其他宠物类，是无法轻易修改的。</li><li>并且如果<code>Dog</code>类有所变化，比如其属性颜色染成了黑色，<code>Person</code>类也会直接受到影响。</li></ul><p>IOC 的思想就是将类的依赖动态注入，以解决上述两个问题：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _pet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._pet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xiaohei</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xiaoming</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bird</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xiaohei) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将实例化的 dog 传入 person 类</span></span></code></pre></div><p>这样，我们就实现了类的控制反转，同时，我们需要有一个容器来维护各个对象实例，当用户需要使用实例时，容器会自动将对象实例化给用户，这部分通常由框架处理，结合 nestJS 框架进行理解的话可以参考我之前写的这篇笔记--<a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/06%E5%8E%9F%E7%90%86%E7%BB%86%E8%8A%82.html" target="_blank" rel="noreferrer">nestJS 原理细节</a>或者<a href="https://docs.nestjs.com/fundamentals/custom-providers" target="_blank" rel="noreferrer">官方文档</a></p><p>这种动态注入的思想叫做<strong>依赖注入</strong>（DI, Dependency Injection），它是 <code>IoC</code> 的一种应用形式。</p><h2 id="aop-aspect-oriented-programming" tabindex="-1">AOP(Aspect Oriented Programming) <a class="header-anchor" href="#aop-aspect-oriented-programming" aria-label="Permalink to &quot;AOP(Aspect Oriented Programming)&quot;">​</a></h2><p>中文为面向切面编程。当一个请求打过来时，一般会经过 Controller（控制器）、Service（服务）、Repository（数据库访问） 的链路。当我们不使用 AOP 时，需要添加一些通用逻辑时（如日志记录、权限守卫、异常处理等等），就需要在每段请求逻辑中编写相关代码。</p><p>AOP 就是在所有请求外面包裹一层切面，所有请求都会经过这个切面，然后我们就可以把上述的通用逻辑放在这个结构里，如下图：</p><p><img src="https://oss.justin3go.com/blogs/AOP.png" alt=""></p><p>在 nestJS 中实现 AOP 的方式有很多，比如（excepion filter、pipes、guards、interceptors），相关介绍可参考我之前的这篇笔记--<a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/08%E6%9B%B4%E5%A4%9A%E6%A8%A1%E5%9D%97.html#%E5%9F%BA%E6%9C%AC" target="_blank" rel="noreferrer">更多模块</a>或者<a href="https://docs.nestjs.com/exception-filters" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>这些思想架构都需要长期的经验体会才更深，我开发经验不足，更多是参考网上的文章和自己非常浅薄的经验进行理解，如有理解错误，欢迎友善指出...</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://docs.nestjs.com/" target="_blank" rel="noreferrer">nestJS 官方文档</a></li><li><a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/06%E5%8E%9F%E7%90%86%E7%BB%86%E8%8A%82.html" target="_blank" rel="noreferrer">nestJS 原理细节</a></li><li><a href="https://hentaicracker.github.io/2020/aopioc.html" target="_blank" rel="noreferrer">什么是 AOP 和 IoC</a></li><li><a href="https://juejin.cn/post/7076431946834214925#heading-8" target="_blank" rel="noreferrer">Nest.js 的 AOP 架构的好处，你感受到了么？</a></li><li><a href="https://www.zhihu.com/question/431911268" target="_blank" rel="noreferrer">java 为什么要分为 service 层，dao 层，controller 层？</a></li><li><a href="https://blog.csdn.net/csh624366188/article/details/7183872" target="_blank" rel="noreferrer">mvc 与三层结构终极区别</a></li><li><a href="https://segmentfault.com/a/1190000016992060" target="_blank" rel="noreferrer">nest 后端开发实战（二）——分层</a></li><li><a href="https://segmentfault.com/a/1190000023740835" target="_blank" rel="noreferrer">Web 开发的历史发展技术演变</a></li><li><a href="https://xie.infoq.cn/article/e50e460c9723825aea4851c06" target="_blank" rel="noreferrer">Java 项目如何分层</a></li><li><a href="https://www.kancloud.cn/kanglin/java_developers_guide/539198" target="_blank" rel="noreferrer">阿里巴巴 java 开发手册</a></li></ul>`,37)]))}const d=i(n,[["render",l]]);export{g as __pageData,d as default};
